{"version":3,"file":"cli.ts.js","sources":["src/cli/build.ts","src/cli/export.ts","src/cli/dev.ts","src/cli.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as clorox from 'clorox';\nimport mkdirp from 'mkdirp';\nimport rimraf from 'rimraf';\nimport { create_compilers, create_app, create_routes, create_serviceworker } from '../core'\nimport { src, dest, dev } from '../config';\n\nexport default async function build() {\n\tconst output = dest();\n\n\tmkdirp.sync(output);\n\trimraf.sync(path.join(output, '**/*'));\n\n\tconst routes = create_routes();\n\n\t// create app/manifest/client.js and app/manifest/server.js\n\tcreate_app({ routes, src, dev });\n\n\tconst { client, server, serviceworker } = create_compilers();\n\n\tconst client_stats = await compile(client);\n\tconsole.log(clorox.inverse(`\\nbuilt client`));\n\tconsole.log(client_stats.toString({ colors: true }));\n\tfs.writeFileSync(path.join(output, 'client_info.json'), JSON.stringify(client_stats.toJson()));\n\n\tconst server_stats = await compile(server);\n\tconsole.log(clorox.inverse(`\\nbuilt server`));\n\tconsole.log(server_stats.toString({ colors: true }));\n\n\tlet serviceworker_stats;\n\n\tif (serviceworker) {\n\t\tcreate_serviceworker({\n\t\t\troutes,\n\t\t\tclient_files: client_stats.toJson().assets.map((chunk: { name: string }) => `/client/${chunk.name}`),\n\t\t\tsrc\n\t\t});\n\n\t\tserviceworker_stats = await compile(serviceworker);\n\t\tconsole.log(clorox.inverse(`\\nbuilt service worker`));\n\t\tconsole.log(serviceworker_stats.toString({ colors: true }));\n\t}\n}\n\nfunction compile(compiler: any) {\n\treturn new Promise((fulfil, reject) => {\n\t\tcompiler.run((err: Error, stats: any) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\n\t\t\tif (stats.hasErrors()) {\n\t\t\t\tconsole.error(stats.toString({ colors: true }));\n\t\t\t\treject(new Error(`Encountered errors while building app`));\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tfulfil(stats);\n\t\t\t}\n\t\t});\n\t});\n}\n","import * as child_process from 'child_process';\nimport * as path from 'path';\nimport * as sander from 'sander';\nimport polka from 'polka';\nimport cheerio from 'cheerio';\nimport URL from 'url-parse';\nimport fetch from 'node-fetch';\nimport * as ports from 'port-authority';\nimport { dest } from '../config';\n\nconst app = polka();\n\nexport default async function exporter(export_dir: string) {\n\tconst build_dir = dest();\n\n\t// Prep output directory\n\tsander.rimrafSync(export_dir);\n\n\tsander.copydirSync('assets').to(export_dir);\n\tsander.copydirSync(build_dir, 'client').to(export_dir, 'client');\n\n\tif (sander.existsSync(build_dir, 'service-worker.js')) {\n\t\tsander.copyFileSync(build_dir, 'service-worker.js').to(export_dir, 'service-worker.js');\n\t}\n\n\tconst port = await ports.find(3000);\n\n\tconst origin = `http://localhost:${port}`;\n\n\tconst proc = child_process.fork(path.resolve(`${build_dir}/server.js`), [], {\n\t\tcwd: process.cwd(),\n\t\tenv: {\n\t\t\tPORT: port,\n\t\t\tNODE_ENV: 'production',\n\t\t\tSAPPER_DEST: build_dir,\n\t\t\tSAPPER_EXPORT: 'true'\n\t\t}\n\t});\n\n\tconst seen = new Set();\n\tconst saved = new Set();\n\n\tproc.on('message', message => {\n\t\tif (!message.__sapper__) return;\n\n\t\tconst url = new URL(message.url, origin);\n\n\t\tif (saved.has(url.pathname)) return;\n\t\tsaved.add(url.pathname);\n\n\t\tif (message.type === 'text/html') {\n\t\t\tconst file = `${export_dir}/${url.pathname}/index.html`;\n\t\t\tsander.writeFileSync(file, message.body);\n\t\t} else {\n\t\t\tconst file = `${export_dir}/${url.pathname}`;\n\t\t\tsander.writeFileSync(file, message.body);\n\t\t}\n\t});\n\n\tfunction handle(url: URL) {\n\t\tif (url.origin !== origin) return;\n\n\t\tif (seen.has(url.pathname)) return;\n\t\tseen.add(url.pathname);\n\n\t\treturn fetch(url.href)\n\t\t\t.then(r => {\n\t\t\t\tif (r.headers.get('Content-Type') === 'text/html') {\n\t\t\t\t\treturn r.text().then((body: string) => {\n\t\t\t\t\t\tconst $ = cheerio.load(body);\n\t\t\t\t\t\tconst hrefs: string[] = [];\n\n\t\t\t\t\t\t$('a[href]').each((i: number, $a) => {\n\t\t\t\t\t\t\threfs.push($a.attribs.href);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn hrefs.reduce((promise, href) => {\n\t\t\t\t\t\t\treturn promise.then(() => handle(new URL(href, url.href)));\n\t\t\t\t\t\t}, Promise.resolve());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err: Error) => {\n\t\t\t\tconsole.error(`Error rendering ${url.pathname}: ${err.message}`);\n\t\t\t});\n\t}\n\n\treturn ports.wait(port)\n\t\t.then(() => handle(new URL(origin))) // TODO all static routes\n\t\t.then(() => proc.kill());\n}","import * as fs from 'fs';\nimport * as path from 'path';\nimport * as net from 'net';\nimport * as clorox from 'clorox';\nimport * as child_process from 'child_process';\nimport * as http from 'http';\nimport mkdirp from 'mkdirp';\nimport rimraf from 'rimraf';\nimport format_messages from 'webpack-format-messages';\nimport prettyMs from 'pretty-ms';\nimport * as ports from 'port-authority';\nimport { dest } from '../config';\nimport { create_compilers, create_app, create_routes, create_serviceworker } from '../core';\n\ntype Deferred = {\n\tpromise?: Promise<any>;\n\tfulfil?: (value?: any) => void;\n\treject?: (err: Error) => void;\n}\n\nfunction deferred() {\n\tconst d: Deferred = {};\n\n\td.promise = new Promise((fulfil, reject) => {\n\t\td.fulfil = fulfil;\n\t\td.reject = reject;\n\t});\n\n\treturn d;\n}\n\nfunction create_hot_update_server(port: number, interval = 10000) {\n\tconst clients = new Set();\n\n\tconst server = http.createServer((req, res) => {\n\t\tif (req.url !== '/__sapper__') return;\n\n\t\treq.socket.setKeepAlive(true);\n\t\tres.writeHead(200, {\n\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t'Access-Control-Allow-Headers': 'Cache-Control',\n\t\t\t'Content-Type': 'text/event-stream;charset=utf-8',\n\t\t\t'Cache-Control': 'no-cache, no-transform',\n\t\t\t'Connection': 'keep-alive',\n\t\t\t// While behind nginx, event stream should not be buffered:\n\t\t\t// http://nginx.org/docs/http/ngx_http_proxy_module.html#proxy_buffering\n\t\t\t'X-Accel-Buffering': 'no'\n\t\t});\n\n\t\tres.write('\\n');\n\n\t\tclients.add(res);\n\t\treq.on('close', () => {\n\t\t\tclients.delete(res);\n\t\t});\n\t});\n\n\tserver.listen(port);\n\n\tfunction send(data: any) {\n\t\tclients.forEach(client => {\n\t\t\tclient.write(`data: ${JSON.stringify(data)}\\n\\n`);\n\t\t});\n\t}\n\n\tsetInterval(() => {\n\t\tsend(null)\n\t}, interval);\n\n\treturn { send };\n}\n\nexport default async function dev(port: number) {\n\tprocess.env.NODE_ENV = 'development';\n\n\tconst dir = dest();\n\trimraf.sync(dir);\n\tmkdirp.sync(dir);\n\n\tconst dev_port = await ports.find(10000);\n\n\tconst routes = create_routes();\n\tcreate_app({ routes, dev_port });\n\n\tconst hot_update_server = create_hot_update_server(dev_port);\n\n\twatch_files('routes/**/*', ['add', 'unlink'], () => {\n\t\tconst routes = create_routes();\n\t\tcreate_app({ routes, dev_port });\n\t});\n\n\twatch_files('app/template.html', ['change'], () => {\n\t\thot_update_server.send({\n\t\t\taction: 'reload'\n\t\t});\n\t});\n\n\tlet proc: child_process.ChildProcess;\n\n\tprocess.on('exit', () => {\n\t\t// sometimes webpack crashes, so we need to kill our children\n\t\tif (proc) proc.kill();\n\t});\n\n\tconst deferreds = {\n\t\tserver: deferred(),\n\t\tclient: deferred()\n\t};\n\n\tlet restarting = false;\n\tlet build = {\n\t\tunique_warnings: new Set(),\n\t\tunique_errors: new Set()\n\t};\n\n\tfunction restart_build(filename: string) {\n\t\tif (restarting) return;\n\n\t\trestarting = true;\n\t\tbuild = {\n\t\t\tunique_warnings: new Set(),\n\t\t\tunique_errors: new Set()\n\t\t};\n\n\t\tprocess.nextTick(() => {\n\t\t\trestarting = false;\n\t\t});\n\n\t\tconsole.log(`\\n${clorox.bold.cyan(path.relative(process.cwd(), filename))} changed. rebuilding...`);\n\t}\n\n\t// TODO watch the configs themselves?\n\tconst compilers = create_compilers();\n\n\tfunction watch(compiler: any, { name, invalid = noop, error = noop, result }: {\n\t\tname: string,\n\t\tinvalid?: (filename: string) => void;\n\t\terror?: (error: Error) => void;\n\t\tresult: (stats: any) => void;\n\t}) {\n\t\tcompiler.hooks.invalid.tap('sapper', (filename: string) => {\n\t\t\tinvalid(filename);\n\t\t});\n\n\t\tcompiler.watch({}, (err: Error, stats: any) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(clorox.red(`✗ ${name}`));\n\t\t\t\tconsole.error(clorox.red(err.message));\n\t\t\t\terror(err);\n\t\t\t} else {\n\t\t\t\tconst messages = format_messages(stats);\n\t\t\t\tconst info = stats.toJson();\n\n\t\t\t\tif (messages.errors.length > 0) {\n\t\t\t\t\tconsole.log(clorox.bold.red(`✗ ${name}`));\n\n\t\t\t\t\tconst filtered = messages.errors.filter((message: string) => {\n\t\t\t\t\t\treturn !build.unique_errors.has(message);\n\t\t\t\t\t});\n\n\t\t\t\t\tfiltered.forEach((message: string) => {\n\t\t\t\t\t\tbuild.unique_errors.add(message);\n\t\t\t\t\t\tconsole.log(message);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst hidden = messages.errors.length - filtered.length;\n\t\t\t\t\tif (hidden > 0) {\n\t\t\t\t\t\tconsole.log(`${hidden} duplicate ${hidden === 1 ? 'error' : 'errors'} hidden\\n`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (messages.warnings.length > 0) {\n\t\t\t\t\t\tconsole.log(clorox.bold.yellow(`• ${name}`));\n\n\t\t\t\t\t\tconst filtered = messages.warnings.filter((message: string) => {\n\t\t\t\t\t\t\treturn !build.unique_warnings.has(message);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfiltered.forEach((message: string) => {\n\t\t\t\t\t\t\tbuild.unique_warnings.add(message);\n\t\t\t\t\t\t\tconsole.log(`${message}\\n`);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst hidden = messages.warnings.length - filtered.length;\n\t\t\t\t\t\tif (hidden > 0) {\n\t\t\t\t\t\t\tconsole.log(`${hidden} duplicate ${hidden === 1 ? 'warning' : 'warnings'} hidden\\n`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`${clorox.bold.green(`✔ ${name}`)} ${clorox.gray(`(${prettyMs(info.time)})`)}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult(info);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\twatch(compilers.server, {\n\t\tname: 'server',\n\n\t\tinvalid: filename => {\n\t\t\trestart_build(filename);\n\t\t\t// TODO print message\n\t\t\tdeferreds.server = deferred();\n\t\t},\n\n\t\tresult: info => {\n\t\t\t// TODO log compile errors/warnings\n\n\t\t\tfs.writeFileSync(path.join(dir, 'server_info.json'), JSON.stringify(info, null, '  '));\n\n\t\t\tdeferreds.client.promise.then(() => {\n\t\t\t\tfunction restart() {\n\t\t\t\t\tports.wait(port).then(deferreds.server.fulfil);\n\t\t\t\t}\n\n\t\t\t\tif (proc) {\n\t\t\t\t\tproc.kill();\n\t\t\t\t\tproc.on('exit', restart);\n\t\t\t\t} else {\n\t\t\t\t\trestart();\n\t\t\t\t}\n\n\t\t\t\tproc = child_process.fork(`${dir}/server.js`, [], {\n\t\t\t\t\tcwd: process.cwd(),\n\t\t\t\t\tenv: Object.assign({\n\t\t\t\t\t\tPORT: port\n\t\t\t\t\t}, process.env)\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n\twatch(compilers.client, {\n\t\tname: 'client',\n\n\t\tinvalid: filename => {\n\t\t\trestart_build(filename);\n\t\t\tdeferreds.client = deferred();\n\n\t\t\t// TODO we should delete old assets. due to a webpack bug\n\t\t\t// i don't even begin to comprehend, this is apparently\n\t\t\t// quite difficult\n\t\t},\n\n\t\tresult: info => {\n\t\t\tfs.writeFileSync(path.join(dir, 'client_info.json'), JSON.stringify(info, null, '  '));\n\t\t\tdeferreds.client.fulfil();\n\n\t\t\tconst client_files = info.assets.map((chunk: { name: string }) => `/client/${chunk.name}`);\n\n\t\t\tdeferreds.server.promise.then(() => {\n\t\t\t\thot_update_server.send({\n\t\t\t\t\tstatus: 'completed'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcreate_serviceworker({\n\t\t\t\troutes: create_routes(),\n\t\t\t\tclient_files\n\t\t\t});\n\n\t\t\twatch_serviceworker();\n\t\t}\n\t});\n\n\tlet watch_serviceworker = compilers.serviceworker\n\t\t? function() {\n\t\t\twatch_serviceworker = noop;\n\n\t\t\twatch(compilers.serviceworker, {\n\t\t\t\tname: 'service worker',\n\n\t\t\t\tresult: info => {\n\t\t\t\t\tfs.writeFileSync(path.join(dir, 'serviceworker_info.json'), JSON.stringify(info, null, '  '));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t: noop;\n}\n\nfunction noop() {}\n\nfunction watch_files(pattern: string, events: string[], callback: () => void) {\n\tconst chokidar = require('chokidar');\n\n\tconst watcher = chokidar.watch(pattern, {\n\t\tpersistent: true,\n\t\tignoreInitial: true\n\t});\n\n\tevents.forEach(event => {\n\t\twatcher.on(event, callback);\n\t});\n}\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport * as child_process from 'child_process';\nimport sade from 'sade';\nimport * as clorox from 'clorox';\nimport prettyMs from 'pretty-ms';\nimport help from './cli/help.md';\nimport build from './cli/build';\nimport exporter from './cli/export';\nimport dev from './cli/dev';\nimport upgrade from './cli/upgrade';\nimport * as ports from 'port-authority';\nimport * as pkg from '../package.json';\n\nconst prog = sade('sapper').version(pkg.version);\n\nprog.command('dev')\n\t.describe('Start a development server')\n\t.option('-p, --port', 'Specify a port')\n\t.action(async (opts: { port: number }) => {\n\t\tlet port = opts.port || +process.env.PORT;\n\n\t\tif (port) {\n\t\t\tif (!await ports.check(port)) {\n\t\t\t\tconsole.log(clorox.bold.red(`> Port ${port} is unavailable`));\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tport = await ports.find(3000);\n\t\t}\n\n\t\tdev(port);\n\t});\n\nprog.command('build [dest]')\n\t.describe('Create a production-ready version of your app')\n\t.action((dest = 'build') => {\n\t\tconsole.log(`> Building...`);\n\n\t\tprocess.env.NODE_ENV = 'production';\n\t\tprocess.env.SAPPER_DEST = dest;\n\n\t\tconst start = Date.now();\n\n\t\tbuild()\n\t\t\t.then(() => {\n\t\t\t\tconst elapsed = Date.now() - start;\n\t\t\t\tconsole.error(`\\n> Finished in ${prettyMs(elapsed)}. Type ${clorox.bold.cyan(dest === 'build' ? 'npx sapper start' : `npx sapper start ${dest}`)} to run the app.`);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error(err ? err.details || err.stack || err.message || err : 'Unknown error');\n\t\t\t});\n\t});\n\nprog.command('start [dir]')\n\t.describe('Start your app')\n\t.option('-p, --port', 'Specify a port')\n\t.action(async (dir = 'build', opts: { port: number }) => {\n\t\tlet port = opts.port || +process.env.PORT;\n\n\t\tconst resolved = path.resolve(dir);\n\t\tconst server = path.resolve(dir, 'server.js');\n\n\t\tif (!fs.existsSync(server)) {\n\t\t\tconsole.log(clorox.bold.red(`> ${dir}/server.js does not exist — type ${clorox.bold.cyan(dir === 'build' ? `npx sapper build` : `npx sapper build ${dir}`)} to create it`));\n\t\t\treturn;\n\t\t}\n\n\t\tif (port) {\n\t\t\tif (!await ports.check(port)) {\n\t\t\t\tconsole.log(clorox.bold.red(`> Port ${port} is unavailable`));\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tport = await ports.find(3000);\n\t\t}\n\n\t\tchild_process.fork(server, [], {\n\t\t\tcwd: process.cwd(),\n\t\t\tenv: Object.assign({\n\t\t\t\tNODE_ENV: 'production',\n\t\t\t\tPORT: port,\n\t\t\t\tSAPPER_DEST: dir\n\t\t\t}, process.env)\n\t\t});\n\t});\n\nprog.command('export [dest]')\n\t.describe('Export your app as static files (if possible)')\n\t.action((dest = 'export') => {\n\t\tconsole.log(`> Building...`);\n\n\t\tprocess.env.NODE_ENV = 'production';\n\t\tprocess.env.SAPPER_DEST = '.sapper/.export';\n\n\t\tconst start = Date.now();\n\n\t\tbuild()\n\t\t\t.then(() => {\n\t\t\t\tconst elapsed = Date.now() - start;\n\t\t\t\tconsole.error(`\\n> Built in ${prettyMs(elapsed)}. Exporting...`);\n\t\t\t})\n\t\t\t.then(() => exporter(dest))\n\t\t\t.then(() => {\n\t\t\t\tconst elapsed = Date.now() - start;\n\t\t\t\tconsole.error(`\\n> Finished in ${prettyMs(elapsed)}. Type ${clorox.bold.cyan(`npx serve ${dest}`)} to run the app.`);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error(err ? err.details || err.stack || err.message || err : 'Unknown error');\n\t\t\t});\n\t});\n\n// TODO upgrade\n\nprog.parse(process.argv);\n"],"names":["dest","path.join","create_routes","create_app","create_compilers","clorox.inverse","fs.writeFileSync","create_serviceworker","sander.rimrafSync","sander.copydirSync","sander.existsSync","sander.copyFileSync","ports.find","child_process.fork","path.resolve","sander.writeFileSync","ports.wait","http.createServer","clorox.bold","path.relative","clorox.red","clorox.gray","pkg.version","ports.check","fs.existsSync"],"mappings":"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"}