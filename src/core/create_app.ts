import * as fs from 'fs';
import * as path from 'path';
import mkdirp from 'mkdirp';
import create_routes from './create_routes';
import { fudge_mtime, posixify, write } from './utils';
import { Route } from '../interfaces';

export default function create_app({ routes, src, dev }: {
	routes: Route[];
	src: string;
	dev: boolean;
}) {
	mkdirp.sync('app/manifest');

	write('app/manifest/client.js', generate_client(routes, src, dev));
	write('app/manifest/server.js', generate_server(routes, src));
}

function generate_client(routes: Route[], src: string, dev: boolean) {
	let code = `
		// This file is generated by Sapper — do not edit it!\nexport const routes = [
			${routes
				.filter(route => route.type === 'page')
				.map(route => {
					const params = route.dynamic.length === 0
						? '{}'
						: `{ ${route.dynamic.map((part, i) => `${part}: match[${i + 1}]`).join(', ')} }`;

					const file = posixify(`../../routes/${route.file}`);
					return `{ pattern: ${route.pattern}, params: ${route.dynamic.length > 0 ? `match` : `()`} => (${params}), load: () => import(/* webpackChunkName: "${route.id}" */ '${file}') }`;
				})
				.join(',\n\t')}
		];`.replace(/^\t\t/gm, '').trim();

	if (dev) {
		const hmr_client = posixify(
			require.resolve(`webpack-hot-middleware/client`)
		);

		code += `\n\nimport('${hmr_client}?path=/__webpack_hmr&timeout=20000'); if (module.hot) module.hot.accept();`;
	}

	return code;
}

function generate_server(routes: Route[], src: string) {
	let code = `
		// This file is generated by Sapper — do not edit it!
		${routes
			.map(route => {
				const file = posixify(`../../routes/${route.file}`);
				return route.type === 'page'
					? `import ${route.id} from '${file}';`
					: `import * as ${route.id} from '${file}';`;
			})
			.join('\n')}

		export const routes = [
			${routes
				.map(route => {
					const params = route.dynamic.length === 0
						? '{}'
						: `{ ${route.dynamic.map((part, i) => `${part}: match[${i + 1}]`).join(', ')} }`;

					const file = posixify(`${src}/${route.file}`);
					return `{ id: '${route.id}', type: '${route.type}', pattern: ${route.pattern}, params: ${route.dynamic.length > 0 ? `match` : `()`} => (${params}), module: ${route.id} }`;
				})
				.join(',\n\t')
			}
		];`.replace(/^\t\t/gm, '').trim();

	return code;
}