import * as fs from 'fs';
import * as path from 'path';
import * as glob from 'glob';
import { posixify, write_if_changed } from './utils';
import { dev, locations } from '../config';
import { Route } from '../interfaces';

export function create_main_manifests({ routes, dev_port }: {
	routes: Route[];
	dev_port?: number;
}) {
	const path_to_routes = path.relative(`${locations.app()}/manifest`, locations.routes());

	const client_manifest = generate_client(routes, path_to_routes, dev_port);
	const server_manifest = generate_server(routes, path_to_routes);

	write_if_changed(`${locations.app()}/manifest/client.js`, client_manifest);
	write_if_changed(`${locations.app()}/manifest/server.js`, server_manifest);
}

export function create_serviceworker_manifest({ routes, client_files }: {
	routes: Route[];
	client_files: string[];
}) {
	const assets = glob.sync('**', { cwd: 'assets', nodir: true });

	let code = `
		// This file is generated by Sapper — do not edit it!
		export const timestamp = ${Date.now()};

		export const assets = [\n\t${assets.map((x: string) => `"${x}"`).join(',\n\t')}\n];

		export const shell = [\n\t${client_files.map((x: string) => `"${x}"`).join(',\n\t')}\n];

		export const routes = [\n\t${routes.pages.filter(r => r.id !== '_error').map((r: Route) => `{ pattern: ${r.pattern} }`).join(',\n\t')}\n];
	`.replace(/^\t\t/gm, '').trim();

	write_if_changed(`${locations.app()}/manifest/service-worker.js`, code);
}

function generate_client(routes: Route[], path_to_routes: string, dev_port?: number) {
	const page_ids = new Set(routes.pages.map(page => page.id));
	const server_routes_to_ignore = routes.server_routes.filter(route => !page_ids.has(route.id));

	const pages = routes.pages.filter(page => page.id !== '_error');
	const error_route = routes.pages.find(page => page.id === '_error');

	let code = `
		// This file is generated by Sapper — do not edit it!
		export const routes = {
			ignore: [${server_routes_to_ignore.map(route => route.pattern).join(', ')}],

			pages: [
				${pages.map(page => {
					const file = posixify(`${path_to_routes}/${page.file}`);

					if (page.id === '_error') {
						return `{ error: true, load: () => import(/* webpackChunkName: "${page.id}" */ '${file}') }`;
					}

					const params = page.params.length === 0
						? '{}'
						: `{ ${page.params.map((part, i) => `${part}: match[${i + 1}]`).join(', ')} }`;

					return `{ pattern: ${page.pattern}, params: ${page.params.length > 0 ? `match` : `()`} => (${params}), load: () => import(/* webpackChunkName: "${page.id}" */ '${file}') }`;
				}).join(',\n\t\t\t\t')}
			],

			error: () => import(/* webpackChunkName: '_error' */ '${posixify(`${path_to_routes}/${error_route.file}`)}')
		};`.replace(/^\t\t/gm, '').trim();

	if (dev()) {
		const sapper_dev_client = posixify(
			path.resolve(__dirname, '../sapper-dev-client.js')
		);

		code += `

			if (module.hot) {
				import('${sapper_dev_client}').then(client => {
					client.connect(${dev_port});
				});
			}`.replace(/^\t{3}/gm, '');
	}

	return code;
}

function generate_server(routes: Route[], path_to_routes: string) {
	const error_route = routes.pages.find(page => page.id === '_error');

	const imports = [].concat(
		routes.server_routes.map(route =>
			`import * as route_${route.id} from '${posixify(`${path_to_routes}/${route.file}`)}';`),
		routes.pages.map(page =>
			`import page_${page.id} from '${posixify(`${path_to_routes}/${page.file}`)}';`),
		`import error from '${posixify(`${path_to_routes}/${error_route.file}`)}';`
	);

	let code = `
		// This file is generated by Sapper — do not edit it!
		${imports.join('\n')}

		export const routes = {
			server_routes: [
				${routes.server_routes.map(route => {
					const params = route.params.length === 0
						? '{}'
						: `{ ${route.params.map((part, i) => `${part}: match[${i + 1}]`).join(', ')} }`;

					return `{ id: '${route.id}', pattern: ${route.pattern}, params: ${route.params.length > 0 ? `match` : `()`} => (${params}), handlers: route_${route.id} }`;
				}).join(',\n\t\t\t\t')}
			],

			pages: [
				${routes.pages.map(page => {
					const params = page.params.length === 0
						? '{}'
						: `{ ${page.params.map((part, i) => `${part}: match[${i + 1}]`).join(', ')} }`;

					return `{ id: '${page.id}', pattern: ${page.pattern}, params: ${page.params.length > 0 ? `match` : `()`} => (${params}), handler: page_${page.id} }`;
				}).join(',\n\t\t\t\t')}
			],

			error: {
				error: true,
				handler: error
			}
		};`.replace(/^\t\t/gm, '').trim();

	return code;
}