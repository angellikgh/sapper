import * as fs from 'fs';
import * as path from 'path';
import * as child_process from 'child_process';
import sade from 'sade';
import * as clorox from 'clorox';
import prettyMs from 'pretty-ms';
// import upgrade from './cli/upgrade';
import * as ports from 'port-authority';
import * as pkg from '../package.json';

const prog = sade('sapper').version(pkg.version);

prog.command('dev')
	.describe('Start a development server')
	.option('-p, --port', 'Specify a port')
	.option('-o, --open', 'Open a browser window')
	.action(async (opts: { port: number, open: boolean }) => {
		const { dev } = await import('./cli/dev');
		dev(opts);
	});

prog.command('build [dest]')
	.describe('Create a production-ready version of your app')
	.option('-l, --launcher', 'Create a launcher file (defaults to start.js)')
	.option('-p, --port', 'Default port, if using --launcher')
	.example(`build -l`)
	.example(`build custom-dir -l custom-launcher.js -p 4567`)
	.action(async (dest = 'build', opts: { launcher: string | true, port: string }) => {
		console.log(`> Building...`);

		if (opts.port && !opts.launcher) {
			console.error(`${clorox.bold.red(`You can only use the --port option with --launcher`)}`);
			process.exit(1);
		}

		process.env.NODE_ENV = 'production';
		process.env.SAPPER_DEST = dest;

		const start = Date.now();

		try {
			const { build } = await import('./cli/build');
			await build();

			let cmd;

			if (opts.launcher) {
				const launcher = opts.launcher === true ? 'start.js' : opts.launcher;
				const resolvedLauncher = path.resolve(launcher);
				const resolvedDest = path.resolve(dest);
				const relative = path.relative(path.dirname(resolvedLauncher), resolvedDest);

				fs.writeFileSync(resolvedLauncher, `
					// generated by sapper build at ${new Date().toISOString()}
					process.env.NODE_ENV = process.env.NODE_ENV || 'production';
					process.env.SAPPER_DEST = require('path').resolve(__dirname, '${relative}');
					process.env.PORT = process.env.PORT || ${opts.port || 3000};

					console.log('Starting server on port ' + process.env.PORT);
					require('${relative[0] === '.' ? relative : `./${relative}`}/server.js');
				`.replace(/^\t+/gm, '').trim());

				cmd = `node ${path.relative(process.cwd(), launcher)}`;
			} else {
				cmd = dest === 'build' ? 'npx sapper start' : `npx sapper start ${dest}`;
			}

			console.error(`\n> Finished in ${elapsed(start)}. Type ${clorox.bold.cyan(cmd)} to run the app.`);
		} catch (err) {
			console.error(err ? err.details || err.stack || err.message || err : 'Unknown error');
		}
	});

prog.command('start [dir]')
	.describe('Start your app')
	.option('-p, --port', 'Specify a port')
	.option('-o, --open', 'Open a browser window')
	.action(async (dir = 'build', opts: { port: number, open: boolean }) => {
		const { start } = await import('./cli/start');
		start(dir, opts);
	});

prog.command('export [dest]')
	.describe('Export your app as static files (if possible)')
	.option('--basepath', 'Specify a base path')
	.action(async (dest = 'export', opts: { basepath?: string }) => {
		console.log(`> Building...`);

		process.env.NODE_ENV = 'production';
		process.env.SAPPER_DEST = '.sapper/.export';

		const start = Date.now();

		try {
			const { build } = await import('./cli/build');
			await build();
			console.error(`\n> Built in ${elapsed(start)}. Crawling site...`);

			const { exporter } = await import('./cli/export');
			await exporter(dest, opts);
			console.error(`\n> Finished in ${elapsed(start)}. Type ${clorox.bold.cyan(`npx serve ${dest}`)} to run the app.`);
		} catch (err) {
			console.error(err ? err.details || err.stack || err.message || err : 'Unknown error');
		}
	});

// TODO upgrade

prog.parse(process.argv);

function elapsed(start: number) {
	return prettyMs(Date.now() - start);
}